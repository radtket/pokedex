{"version":3,"sources":["components/poke-grid/PokeCard.js","api/uri.js","api/Pokedex.js","components/common/Spinner.js","components/poke-grid/PokeGrid.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["StyledPokeCard","styled","Link","_templateObject","_taggedTemplateLiteral","PokeCard","_ref","id","name","React","createElement","to","concat","className","alt","height","src","BASE_URL","getPaginatedPokemonList","offset","limit","axios","get","GET_PAGINATED_POKEMONS_URL","then","data","results","map","i","url","substring","length","catch","e","console","error","StyledSpinner","div","Spinner","StyledPokeGrid","StyledPokeGridLoaderWrap","_templateObject2","PokeGrid","fetching","setFetching","useState","pokemonList","setPokemonList","setOffset","getPokemonList","useCallback","async","response","o","prevList","useEffect","prevYRef","useRef","OBSERVER","IntersectionObserver","entries","observedElement","y","boundingClientRect","current","prev","threshold","OBSERVED_ELEMENT_REF","CURRENT_OBSERVER","CURRENT_OBSERVED_ELEMENT_REF","observe","unobserve","pokemon","Object","assign","key","ref","StyledMainWrapper","StyledMain","main","StyledHeader","header","_templateObject3","Main","Switch","Route","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bdbe956f.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst StyledPokeCard = styled(Link)`\n  padding-top: 24px;\n  border-radius: 2px;\n  box-shadow: 0 0 5px rgba(3, 27, 78, 0.1);\n  transition: box-shadow 0.4s ease-in-out;\n\n  &:hover {\n    box-shadow: 0 2px 20px rgba(3, 27, 78, 0.4);\n    cursor: pointer;\n  }\n\n  figure {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  dl {\n    height: 60px;\n    margin: 0;\n    padding: 6px 24px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  dt {\n    height: 20px;\n    padding: 0 6px;\n    border-radius: 10px;\n    background-color: #90caf9;\n    font-family: 'Open Sans Condensed', sans-serif;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  dd {\n    margin: 0;\n    font-size: 18px;\n    font-family: 'Open Sans Condensed', sans-serif;\n    text-transform: uppercase;\n  }\n`;\n\nconst PokeCard = ({ id, name }) => {\n  return (\n    <StyledPokeCard to={`/pokemon/${id}`}>\n      <figure className=\"pokemon-card-image\">\n        <img\n          alt={`PokÃ©mon: ${name}`}\n          height=\"180px\"\n          // src={`https://pokeres.bastionbot.org/images/pokemon/${id}.png`}\n          src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`}\n        />\n      </figure>\n      <dl>\n        <dt>#{id}</dt>\n        <dd>{name}</dd>\n      </dl>\n    </StyledPokeCard>\n  );\n};\n\nexport default PokeCard;\n","const BASE_URL = `https://pokeapi.co/api/v2`;\n\n/**\n * @param {number} offset\n * @param {number} limit\n * @description Get the paginated list of pokemon based on offset and limit\n */\nexport const GET_PAGINATED_POKEMONS_URL = (offset, limit) =>\n  `${BASE_URL}/pokemon?offset=${offset}&limit=${limit}`;\n\n/**\n * @param {string} idOrName\n * @description Get the pokemon by its pokedex id or name\n */\nexport const GET_POKEMON_BY_ID_OR_NAME_URL = idOrName =>\n  `${BASE_URL}/pokemon/${idOrName}`;\n","import axios from 'axios';\nimport { GET_PAGINATED_POKEMONS_URL } from './uri';\n\nconst getPaginatedPokemonList = (offset, limit) =>\n  axios\n    .get(GET_PAGINATED_POKEMONS_URL(offset, limit))\n    .then(({ data }) =>\n      data.results.map(i => ({\n        name: i.name,\n        id: i.url.substring(34, i.url.length - 1),\n      }))\n    )\n    .catch(e => {\n      console.error('Error occured while fetching list of pokemons: ', e);\n      return [];\n    });\n\nexport default getPaginatedPokemonList;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledSpinner = styled.div`\n  display: inline-block;\n  width: 80px;\n  height: 80px;\n  border: 3px solid #e3350d4d;\n  border-radius: 50%;\n  border-top-color: #e3350d;\n  animation: spin 1s ease-in-out infinite;\n  -webkit-animation: spin 1s ease-in-out infinite;\n\n  @keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Spinner = () => <StyledSpinner />;\n\nexport default Spinner;\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\n\nimport styled from 'styled-components';\n\nimport PokeCard from './PokeCard';\nimport getPaginatedPokemonList from '../../api/Pokedex';\nimport Spinner from '../common/Spinner';\n\nconst StyledPokeGrid = styled.div`\n  height: 100%;\n  display: grid;\n  grid-gap: 12px;\n  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));\n`;\n\nconst StyledPokeGridLoaderWrap = styled.div`\n  height: 200px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst LIMIT = 40;\n\nconst PokeGrid = () => {\n  const [fetching, setFetching] = useState(false);\n  const [pokemonList, setPokemonList] = useState([]);\n  const [offset, setOffset] = useState(0);\n\n  const getPokemonList = useCallback(async o => {\n    setFetching(true);\n    const response = await getPaginatedPokemonList(o, LIMIT);\n    setPokemonList(prevList => [...prevList, ...response]);\n    setFetching(false);\n  }, []);\n\n  const fetchMorePokemon = () => {\n    setOffset(prev => prev + LIMIT);\n  };\n\n  useEffect(() => {\n    getPokemonList(offset);\n  }, [offset, getPokemonList]);\n\n  const prevYRef = useRef(0);\n\n  const OBSERVER = useRef(\n    new IntersectionObserver(\n      entries => {\n        const [observedElement] = entries;\n        const { y } = observedElement.boundingClientRect;\n        if (prevYRef.current > y) {\n          fetchMorePokemon();\n        }\n        prevYRef.current = y;\n      },\n      { threshold: 0.1 }\n    )\n  );\n\n  const OBSERVED_ELEMENT_REF = useRef(null);\n\n  useEffect(() => {\n    const CURRENT_OBSERVER = OBSERVER && OBSERVER.current;\n\n    const CURRENT_OBSERVED_ELEMENT_REF =\n      OBSERVED_ELEMENT_REF && OBSERVED_ELEMENT_REF.current;\n\n    if (CURRENT_OBSERVED_ELEMENT_REF) {\n      CURRENT_OBSERVER.observe(CURRENT_OBSERVED_ELEMENT_REF);\n    }\n\n    return () => {\n      if (CURRENT_OBSERVED_ELEMENT_REF) {\n        CURRENT_OBSERVER.unobserve(CURRENT_OBSERVED_ELEMENT_REF);\n      }\n    };\n  }, []);\n\n  return (\n    <StyledPokeGrid>\n      {pokemonList.map(pokemon => (\n        <PokeCard key={pokemon.name} {...pokemon} />\n      ))}\n      <StyledPokeGridLoaderWrap\n        ref={OBSERVED_ELEMENT_REF}\n        className=\"pokedex-grid-loader\"\n      >\n        {fetching && <Spinner />}\n      </StyledPokeGridLoaderWrap>\n    </StyledPokeGrid>\n  );\n};\n\nexport default PokeGrid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport PokeGrid from './poke-grid/PokeGrid';\n\nconst StyledMainWrapper = styled.div`\n  height: 100vh;\n  overflow: hidden;\n`;\n\nconst StyledMain = styled.main`\n  height: calc(100% - 60px);\n  padding: 24px;\n  overflow: auto;\n`;\n\nconst StyledHeader = styled.header`\n  align-items: center;\n  background-color: #e3350d;\n  color: #fff;\n  display: flex;\n  font-size: larger;\n  font-weight: bold;\n  height: 60px;\n  padding-left: 60px;\n\n  a {\n    cursor: pointer;\n  }\n`;\n\nconst Main = () => {\n  return (\n    <StyledMainWrapper>\n      <StyledHeader>\n        <Link to=\"/\">PokÃ©mon</Link>\n      </StyledHeader>\n      <StyledMain>\n        <Switch>\n          <Route path=\"/pokemon/:id\" />\n          <Route component={PokeGrid} path=\"/\" />\n        </Switch>\n      </StyledMain>\n    </StyledMainWrapper>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport Main from './components/Main';\n\nconst App = () => (\n  <Route path=\"/\">\n    <Main />\n  </Route>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}